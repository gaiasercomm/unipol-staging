[
	{ rabbit, [
	    {hipe_compile, false},
        {cluster_partition_handling,autoheal},
        %% The categories are: channel, connection, federation, mirroring and autocluster.
        %% Log levels are: debug, info, warning, error, none.
        {log_levels, [{channel, error}, {connection, debug}, {federation, error}, {mirroring, error}, {autocluster, warning}]},
		{tcp_listeners, [ 5672 ] },
		{handshake_timeout, 30000},
		{ssl, [{versions, ['tlsv1.2', 'tlsv1.1']},
	           {reuse_sessions, true}]},
        {ssl_options, [{cacertfile,      "/etc/rabbitmq/ssl/testca/cacert.pem"},
                  {certfile,             "/etc/rabbitmq/ssl/server/cert.pem"},
                  {keyfile,              "/etc/rabbitmq/ssl/server/key.pem"},
                  {verify,               verify_peer},
                  {fail_if_no_peer_cert, false},
                  {versions, ['tlsv1.2', 'tlsv1.1']}
                  ]},
		%% {auth_backends, [rabbit_auth_backend_cache, rabbit_auth_backend_internal]},
		{auth_backends, [rabbit_auth_backend_internal]},
		{ssl_handshake_timeout, 30000},
		{tcp_listen_options, [
                          {backlog,       4096},
                          {nodelay,       true},
			              {keepalive, true},
			              {linger,        {true,0} },
                          {sndbuf, 65536},
                          {recbuf, 65536},
			              {high_msgq_watermark, 49152},
                          {high_watermark, 49152},
			              {low_msgq_watermark, 16384},
                          {low_watermark, 16384},
                          {exit_on_close, false}]},
		{vm_memory_high_watermark, 0.4},
		{vm_memory_high_watermark_paging_ratio, 0.75},
		{collect_statistics_interval, 120000},
		{delegate_count, 32}
	] },
    {kernel,
    [
        {inet_default_connect_options, [{nodelay, true}]},
        {inet_default_listen_options,  [{nodelay, true}]},
        {inet_dist_listen_min, 25672},
        {inet_dist_listen_max, 25672}
    ]},
	{ rabbitmq_management, [
        { listener, [
		  { port, 15672 },
		  { ssl, false }
	    ] },
        {stats_event_max_backlog, 32},
        {rates_mode, none}
    ] },
	{ rabbitmq_mqtt,
	[
        {tcp_listeners, [1883]},
        {ssl_listeners, [8883]},
        {num_tcp_acceptors, 50},
        {num_ssl_acceptors, 50},
        {ssl_handshake_timeout, 30000},
        {handshake_timeout, 30000},
	    {tcp_listen_options, [
                         {backlog,   4096},
                         {nodelay,   true},
			             {keepalive, true},
                         {linger,    {true,0}},
			             {exit_on_close,  false},
			             {high_msgq_watermark, 49152},
                         {high_watermark, 49152},
			             {low_msgq_watermark, 16384},
                         {low_watermark, 16384},
                         {sndbuf,    65536},
                         {recbuf,    65536}]}
    ]},
    {rabbitmq_auth_backend_cache,
        [
            {cached_backend, rabbit_auth_backend_ldap},
            {cache_ttl, 1800000}
        ]
    },
    {rabbitmq_auth_backend_ldap,
    [
	    {servers, ["neutral_ldap"]},
	    {use_ssl, false},
	    {port, 389},
	    {log, true},
	    {user_dn_pattern, "cn=${username},ou=SecuredObjects,dc=smartgaiacloud,dc=com"},
        {resource_access_query,
          {'or', [
               {'and',[{equals,{attribute, "${user_dn}", "cn"},"onboard"} ,{match, {string, "${name}"}, "^\\$gaia\/[A-Za-z0-9_-]+\/[A-Za-z0-9_-]+\/v[0-9]+\/onboard\/[0-9A-Fa-f]{12}\/(req|rsp|\\+)\/(\\+|[A-Za-z0-9_-])+"}]},
               {'and',[{'not', {equals, {attribute, "${user_dn}", "cn"}, "onboard"}}, {match, {string, "${name}"},{string, "^\\$gaia\/[A-Za-z0-9_-]+\/[A-Za-z0-9_-]+\/[A-Za-z0-9_-]+\/[A-Za-z0-9_-]+\/(([0-9]{1,3})-([0-9]{1,3})-([0-9]{1,3})-([0-9]{1,3})\/)?(req|rsp|\\+)\/(\\+|[A-Za-z0-9_-])+"}}, {match, {attribute, "${user_dn}", "cn"}, {string, "${name}"}}]},
               {equals, {attribute, "${user_dn}", "cn"},"gaia_dl"},
               {equals, {string, "${name}"},"amq.topic"},
               {'and', [{match, {string, "${name}"},"^mqtt-subscription-[A-Za-z0-9_-]+qos[0-2]$"},{match, {string, "${name}"},{attribute, "${user_dn}", "cn"}}]}
              ]
          }
        }
    ]}
].